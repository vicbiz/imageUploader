package {		import flash.display.*;	import flash.events.*;	import flash.text.*;		import flash.external.ExternalInterface;	import flash.net.FileReference;	import flash.net.FileReferenceList;	import flash.net.FileFilter;	import flash.net.URLRequest;	public class AjaxFileUpload extends MovieClip {				var file:FileReference;		var multiFile:FileReferenceList;		var urlRequest:URLRequest;		var settings:Object = LoaderInfo(stage.loaderInfo).parameters;		public function AjaxFileUpload():void {						urlRequest = new URLRequest();						// Make sure the only required setting (url) is available.			if (!settings.url) {				fireJSCallback("onError", ["You must provide a url!"]);				//return;			}						if (!settings.method) {				settings.method = "post";			}			if (settings.multiple) {				multiFile = new FileReferenceList();				bindEventsToObject(multiFile);			} else {				file = new FileReference();				bindEventsToObject(file);			}						if (settings.additionalData) {				urlRequest.data = settings.additionalData;			}						urlRequest.url = settings.url;			urlRequest.method = settings.method;						setupButton();					}				private function fireJSCallback(method:String, args:Array){			ExternalInterface.call("AjaxFileUploadFlashProxy", settings.id, method, args);		}				private function setupButton():void {			select_btn.useHandCursor = true;			select_btn.alpha = 0;			select_btn.x = 0;			select_btn.y = 0;			select_btn.width = this.root.width;			select_btn.height = this.root.height;		}		private function bindEventsToObject(obj):void {			select_btn.addEventListener(MouseEvent.CLICK, triggerBrowseDialog);				obj.addEventListener(Event.CANCEL, onCancel);			obj.addEventListener(Event.COMPLETE, onComplete);			obj.addEventListener(IOErrorEvent.IO_ERROR, onError);			obj.addEventListener(Event.OPEN, onOpen);			obj.addEventListener(ProgressEvent.PROGRESS, onProgress);			obj.addEventListener(Event.SELECT, onSelection);			obj.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, onCompleteData);		}				private function triggerBrowseDialog(e:MouseEvent):void {			var fileFilter = new Array();			if (settings.allowedTypes) {				fileFilter.push(new FileFilter("Files (" + settings.allowedTypes +")", settings.allowedTypes ));			}			if (settings.multiple) {				multiFile.browse(fileFilter);			} else {				file.browse(fileFilter);			}		}				/**		 Callbacks		----------------------------------------*/		private function onCancel(e:Event):void {}		private function onSelection(e:Event):void {						if (settings.multiple) {				for (var i:Number = 0; i<multiFile.fileList.length; i++) {					if (validate(multiFile.fileList[i])) {						bindEventsToObject(multiFile.fileList[i]);						multiFile.fileList[i].upload(urlRequest);					}				}			} else {				if (validate(file)) {					file.upload(urlRequest);      				fireJSCallback("onFileSelect", [e.currentTarget, getFileDataFromFileRef(e.currentTarget)]);				}			}					}				private function validate(file:FileReference):Boolean {			if (settings.sizeLimit) {				if (file.size >= settings.sizeLimit) {					//trace(file.name + ' is ' + file.size + " bytes. Your provided limit is " + settings.sizeLimit + " bytes.");					fireJSCallback("onError", [file.name + ' is ' + file.size + " bytes. Your provided limit is " + settings.sizeLimit + " bytes."]);					return false;				}							}			return true;		}				private function onComplete(e:Event):void {			fireJSCallback("onProgressEnd", [getFileDataFromFileRef(e.currentTarget)]);		}				private function onError(e:IOErrorEvent):void {			fireJSCallback("onError", [e.text, getFileDataFromFileRef(e.currentTarget)]);		}				private function onOpen(e:Event):void {			fireJSCallback("onProgressStart", [getFileDataFromFileRef(e.currentTarget)]);		}				private function onProgress(e:ProgressEvent):void {			fireJSCallback("onProgress", [e.bytesLoaded, e.bytesTotal, getFileDataFromFileRef(e.currentTarget)]);		}						private function onCompleteData(e:DataEvent):void {			fireJSCallback("onSuccess", [e.data, getFileDataFromFileRef(e.currentTarget), urlRequest]);		}				/**		 Utilities		----------------------------------------*/		private function getFileDataFromFileRef(file):Object {			var fileData = new Object();			fileData.size = file.size;			fileData.modificationDate = file.modificationDate;			fileData.name = file.name;			fileData.type = file.type;			return fileData;		}			}	}